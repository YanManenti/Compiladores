from Data.TOKEN_DICT import TOKEN_DICT
from Data.NONTERMINAL_DICT import NONTERMINAL_DICT
from Utils.PrintTable import printTable

rows =  max(NONTERMINAL_DICT.values()) + 1
cols = max(TOKEN_DICT.values()) + 1

PARSE_TABLE = [[None for _ in range(cols)] for _ in range(rows)]

# Montar a tabela de parse aqui. Usar apenas
# um espaço entre os símbolos, pois eles serão
# separados por Str.split(" ") depois.
# Usar "î" como vazio;
# Exemplo: PARSE_TABLE[0][0]=", ) var"

# PARSE_TABLE[NONTERMINAL_DICT["NAO TERM"]][TOKEN_DICT["TOKEN"]] = "REGRA"
#PROGRAMA
PARSE_TABLE[NONTERMINAL_DICT["PROGRAMA"]][TOKEN_DICT["program"]] = "program ident ; DECLARACOES BLOCO ."

#DECLARACOES
PARSE_TABLE[NONTERMINAL_DICT["DECLARACOES"]][TOKEN_DICT["const"]] = "CONSTANTES VARIAVEIS PROCEDIMENTOS"
PARSE_TABLE[NONTERMINAL_DICT["DECLARACOES"]][TOKEN_DICT["var"]] = "CONSTANTES VARIAVEIS PROCEDIMENTOS"
PARSE_TABLE[NONTERMINAL_DICT["DECLARACOES"]][TOKEN_DICT["begin"]] = "CONSTANTES VARIAVEIS PROCEDIMENTOS"

#CONSTANTES
PARSE_TABLE[NONTERMINAL_DICT["CONSTANTES"]][TOKEN_DICT["const"]] = "const ident = integer ; CONSTANTES"
PARSE_TABLE[NONTERMINAL_DICT["CONSTANTES"]][TOKEN_DICT["var"]] = "î"

#VARIAVEIS
PARSE_TABLE[NONTERMINAL_DICT["VARIAVEIS"]][TOKEN_DICT["var"]] = "var LISTAVARIAVEIS : TIPO ; LDVAR"

#LISTAVARIAVEIS
PARSE_TABLE[NONTERMINAL_DICT["LISTAVARIAVEIS"]][TOKEN_DICT["ident"]] = "ident REPIDENT"

#REPIDENT
PARSE_TABLE[NONTERMINAL_DICT["REPIDENT"]][TOKEN_DICT[","]] = ", ident REPIDENT"
PARSE_TABLE[NONTERMINAL_DICT["REPIDENT"]][TOKEN_DICT[":"]] = "î"

#LDVAR
PARSE_TABLE[NONTERMINAL_DICT["LDVAR"]][TOKEN_DICT["ident"]] = "LISTAVARIAVEIS : TIPO ; LDVAR"
PARSE_TABLE[NONTERMINAL_DICT["LDVAR"]][TOKEN_DICT["begin"]] = "î"
PARSE_TABLE[NONTERMINAL_DICT["LDVAR"]][TOKEN_DICT["procedure"]] = "î"

#TIPO
PARSE_TABLE[NONTERMINAL_DICT["TIPO"]][TOKEN_DICT["integer"]] = "integer"
PARSE_TABLE[NONTERMINAL_DICT["TIPO"]][TOKEN_DICT["real"]] = "real"
PARSE_TABLE[NONTERMINAL_DICT["TIPO"]][TOKEN_DICT["string"]] = "string"

#PROCEDIMENTOS
PARSE_TABLE[NONTERMINAL_DICT["PROCEDIMENTOS"]][TOKEN_DICT["procedure"]] = "procedure ident PARAMETROS ; BLOCO ; PROCEDIMENTOS"
PARSE_TABLE[NONTERMINAL_DICT["PROCEDIMENTOS"]][TOKEN_DICT["begin"]] = "î"

#PARAMETROS
PARSE_TABLE[NONTERMINAL_DICT["PARAMETROS"]][TOKEN_DICT["("]] = "( LISTAVARIAVEIS : TIPO REPPARAMETROS )"
PARSE_TABLE[NONTERMINAL_DICT["PARAMETROS"]][TOKEN_DICT[";"]] = "î"

#REPPARAMETROS
PARSE_TABLE[NONTERMINAL_DICT["REPPARAMETROS"]][TOKEN_DICT[","]] = ", LISTAVARIAVEIS : TIPO REPPARAMETROS"
PARSE_TABLE[NONTERMINAL_DICT["REPPARAMETROS"]][TOKEN_DICT[")"]] = "î"

#BLOCO
PARSE_TABLE[NONTERMINAL_DICT["BLOCO"]][TOKEN_DICT["begin"]] = 'begin COMANDOS end'

#COMANDOS
# PARSE_TABLE[NONTERMINAL_DICT["COMANDO"]][TOKEN_DICT["print"]]= "COMANDO ; COMANDOS"
# PARSE_TABLE[NONTERMINAL_DICT["COMANDO"]][TOKEN_DICT["if"]]= "COMANDO ; COMANDOS"
# PARSE_TABLE[NONTERMINAL_DICT["COMANDO"]][TOKEN_DICT["ident"]]= "COMANDO ; COMANDOS"
# PARSE_TABLE[NONTERMINAL_DICT["COMANDO"]][TOKEN_DICT["for"]]= "COMANDO ; COMANDOS"
# PARSE_TABLE[NONTERMINAL_DICT["COMANDO"]][TOKEN_DICT["while"]]= "COMANDO ; COMANDOS"
# PARSE_TABLE[NONTERMINAL_DICT["COMANDO"]][TOKEN_DICT["read"]]= "COMANDO ; COMANDOS"
PARSE_TABLE[NONTERMINAL_DICT["COMANDOS"]][TOKEN_DICT["print"]]= "COMANDO ; COMANDOS"
PARSE_TABLE[NONTERMINAL_DICT["COMANDOS"]][TOKEN_DICT["if"]]= "COMANDO ; COMANDOS"
PARSE_TABLE[NONTERMINAL_DICT["COMANDOS"]][TOKEN_DICT["ident"]]= "COMANDO ; COMANDOS"
PARSE_TABLE[NONTERMINAL_DICT["COMANDOS"]][TOKEN_DICT["for"]]= "COMANDO ; COMANDOS"
PARSE_TABLE[NONTERMINAL_DICT["COMANDOS"]][TOKEN_DICT["while"]]= "COMANDO ; COMANDOS"
PARSE_TABLE[NONTERMINAL_DICT["COMANDOS"]][TOKEN_DICT["read"]]= "COMANDO ; COMANDOS"
PARSE_TABLE[NONTERMINAL_DICT["COMANDOS"]][TOKEN_DICT["end"]]= "î"

#COMANDO
PARSE_TABLE[NONTERMINAL_DICT["COMANDO"]][TOKEN_DICT["end"]] = "î"
PARSE_TABLE[NONTERMINAL_DICT["COMANDO"]][TOKEN_DICT["print"]] = "print { ITEMSAIDA REPITEM }"
PARSE_TABLE[NONTERMINAL_DICT["COMANDO"]][TOKEN_DICT["if"]] = "if EXPRELACIONAL then BLOCO ELSEOPC"
PARSE_TABLE[NONTERMINAL_DICT["COMANDO"]][TOKEN_DICT["ident"]] = "ident CHAMADAPROC"
PARSE_TABLE[NONTERMINAL_DICT["COMANDO"]][TOKEN_DICT["for"]] = "for ident := EXPRESSAO to EXPRESSAO do BLOCO"
PARSE_TABLE[NONTERMINAL_DICT["COMANDO"]][TOKEN_DICT["while"]] = "while EXPRELACIONAL do BLOCO"
PARSE_TABLE[NONTERMINAL_DICT["COMANDO"]][TOKEN_DICT["read"]] = "read ( ident )"

#ITEMSAIDA
PARSE_TABLE[NONTERMINAL_DICT["ITEMSAIDA"]][TOKEN_DICT["("]] = "EXPRESSAO"
PARSE_TABLE[NONTERMINAL_DICT["ITEMSAIDA"]][TOKEN_DICT["ident"]] = "EXPRESSAO"
PARSE_TABLE[NONTERMINAL_DICT["ITEMSAIDA"]][TOKEN_DICT["integer"]] = "EXPRESSAO"
PARSE_TABLE[NONTERMINAL_DICT["ITEMSAIDA"]][TOKEN_DICT["real"]] = "EXPRESSAO"
PARSE_TABLE[NONTERMINAL_DICT["ITEMSAIDA"]][TOKEN_DICT["literal"]] = "EXPRESSAO"
PARSE_TABLE[NONTERMINAL_DICT["ITEMSAIDA"]][TOKEN_DICT["string"]] = "EXPRESSAO"

#REPITEM
PARSE_TABLE[NONTERMINAL_DICT["REPITEM"]][TOKEN_DICT[","]] = ", ITEMSAIDA REPITEM"
PARSE_TABLE[NONTERMINAL_DICT["REPITEM"]][TOKEN_DICT["}"]] = "î"

#EXPRESSAO
# PARSE_TABLE[NONTERMINAL_DICT["EXPRESSAO"]][TOKEN_DICT["("]] = "TERMO EXPR"
# PARSE_TABLE[NONTERMINAL_DICT["EXPRESSAO"]][TOKEN_DICT["ident"]] = "TERMO EXPR"
# PARSE_TABLE[NONTERMINAL_DICT["EXPRESSAO"]][TOKEN_DICT["nint"]] = "TERMO EXPR"
# PARSE_TABLE[NONTERMINAL_DICT["EXPRESSAO"]][TOKEN_DICT["nreal"]] = "TERMO EXPR"
# PARSE_TABLE[NONTERMINAL_DICT["EXPRESSAO"]][TOKEN_DICT["literal"]] = "TERMO EXPR"
# PARSE_TABLE[NONTERMINAL_DICT["EXPRESSAO"]][TOKEN_DICT["vstring"]] = "TERMO EXPR"
PARSE_TABLE[NONTERMINAL_DICT["EXPRESSAO"]][TOKEN_DICT["("]] = "TERMO EXPR"
PARSE_TABLE[NONTERMINAL_DICT["EXPRESSAO"]][TOKEN_DICT["ident"]] = "TERMO EXPR"
PARSE_TABLE[NONTERMINAL_DICT["EXPRESSAO"]][TOKEN_DICT["integer"]] = "TERMO EXPR"
PARSE_TABLE[NONTERMINAL_DICT["EXPRESSAO"]][TOKEN_DICT["real"]] = "TERMO EXPR"
PARSE_TABLE[NONTERMINAL_DICT["EXPRESSAO"]][TOKEN_DICT["literal"]] = "TERMO EXPR"
PARSE_TABLE[NONTERMINAL_DICT["EXPRESSAO"]][TOKEN_DICT["string"]] = "TERMO EXPR"

#EXPR
PARSE_TABLE[NONTERMINAL_DICT["EXPR"]][TOKEN_DICT["+"]] = "+ TERMO EXPR"
PARSE_TABLE[NONTERMINAL_DICT["EXPR"]][TOKEN_DICT["-"]] = "- TERMO EXPR"
for tk in [")", ",", "}", "=", "<", ">", "<=", ">=", "<>", "to", "do", "then", ";"]:
    PARSE_TABLE[NONTERMINAL_DICT["EXPR"]][TOKEN_DICT[tk]] = "î"

#TERMO
for tk in ["(", "ident", "integer", "real", "literal", "string"]:
    PARSE_TABLE[NONTERMINAL_DICT["TERMO"]][TOKEN_DICT[tk]] = "FATOR TER"

for tk in ["+", "-", ")", ",", "}", "=", "<", ">", "to", "do", "then", ";"]:
    PARSE_TABLE[NONTERMINAL_DICT["TERMO"]][TOKEN_DICT[tk]] = "î"

#TER
PARSE_TABLE[NONTERMINAL_DICT["TER"]][TOKEN_DICT["*"]] = "* FATOR TER"
PARSE_TABLE[NONTERMINAL_DICT["TER"]][TOKEN_DICT["/"]] = "/ FATOR TER"
for tk in ["+", "-", ")", ",", "}", "=", "<", ">", "<=", ">=", "<>", "to", "do", "then", ";"]:
    PARSE_TABLE[NONTERMINAL_DICT["TER"]][TOKEN_DICT[tk]] = "î"

#FATOR
# PARSE_TABLE[NONTERMINAL_DICT["FATOR"]][TOKEN_DICT["("]] = "( EXPRESSAO )"
# PARSE_TABLE[NONTERMINAL_DICT["FATOR"]][TOKEN_DICT["ident"]] = "ident"
# PARSE_TABLE[NONTERMINAL_DICT["FATOR"]][TOKEN_DICT["nint"]] = "nint"
# PARSE_TABLE[NONTERMINAL_DICT["FATOR"]][TOKEN_DICT["nreal"]] = "nreal"
# PARSE_TABLE[NONTERMINAL_DICT["FATOR"]][TOKEN_DICT["literal"]] = "literal"
# PARSE_TABLE[NONTERMINAL_DICT["FATOR"]][TOKEN_DICT["vstring"]] = "vstring"
PARSE_TABLE[NONTERMINAL_DICT["FATOR"]][TOKEN_DICT["("]] = "( EXPRESSAO )"
PARSE_TABLE[NONTERMINAL_DICT["FATOR"]][TOKEN_DICT["ident"]] = "ident"
PARSE_TABLE[NONTERMINAL_DICT["FATOR"]][TOKEN_DICT["integer"]] = "integer"
PARSE_TABLE[NONTERMINAL_DICT["FATOR"]][TOKEN_DICT["real"]] = "real"
PARSE_TABLE[NONTERMINAL_DICT["FATOR"]][TOKEN_DICT["literal"]] = "literal"
PARSE_TABLE[NONTERMINAL_DICT["FATOR"]][TOKEN_DICT["string"]] = "string"

#EXPRELACIONAL
for tk in ["(", "ident", "integer", "real", "literal", "string"]:
    PARSE_TABLE[NONTERMINAL_DICT["EXPRELACIONAL"]][TOKEN_DICT[tk]] = "EXPRESSAO OPREL EXPRESSAO"


#OPREL
PARSE_TABLE[NONTERMINAL_DICT["OPREL"]][TOKEN_DICT["="]] = "="
PARSE_TABLE[NONTERMINAL_DICT["OPREL"]][TOKEN_DICT["<>"]] = "<>"
PARSE_TABLE[NONTERMINAL_DICT["OPREL"]][TOKEN_DICT["<"]] = "<"
PARSE_TABLE[NONTERMINAL_DICT["OPREL"]][TOKEN_DICT[">"]] = ">"
PARSE_TABLE[NONTERMINAL_DICT["OPREL"]][TOKEN_DICT["<="]] = "<="
PARSE_TABLE[NONTERMINAL_DICT["OPREL"]][TOKEN_DICT[">="]] = ">="

#ELSEOPC
PARSE_TABLE[NONTERMINAL_DICT["ELSEOPC"]][TOKEN_DICT["else"]] = "else BLOCO"
PARSE_TABLE[NONTERMINAL_DICT["ELSEOPC"]][TOKEN_DICT[";"]] = "î"

#CHAMADAPROC
PARSE_TABLE[NONTERMINAL_DICT["CHAMADAPROC"]][TOKEN_DICT["("]] = "LISTAPARAMETROS"
PARSE_TABLE[NONTERMINAL_DICT["CHAMADAPROC"]][TOKEN_DICT[":="]] = ":= EXPRESSAO"

#LISTAPARAMETROS
PARSE_TABLE[NONTERMINAL_DICT["LISTAPARAMETROS"]][TOKEN_DICT["("]] = "( PAR REPPAR )"
PARSE_TABLE[NONTERMINAL_DICT["LISTAPARAMETROS"]][TOKEN_DICT[";"]] = "î"

#PAR
# PARSE_TABLE[NONTERMINAL_DICT["PAR"]][TOKEN_DICT["ident"]] = "ident"
# PARSE_TABLE[NONTERMINAL_DICT["PAR"]][TOKEN_DICT["nint"]] = "nint"
# PARSE_TABLE[NONTERMINAL_DICT["PAR"]][TOKEN_DICT["nreal"]] = "nreal"
# PARSE_TABLE[NONTERMINAL_DICT["PAR"]][TOKEN_DICT["literal"]] = "literal"
# PARSE_TABLE[NONTERMINAL_DICT["PAR"]][TOKEN_DICT["vstring"]] = "vstring"
PARSE_TABLE[NONTERMINAL_DICT["PAR"]][TOKEN_DICT["ident"]] = "ident"
PARSE_TABLE[NONTERMINAL_DICT["PAR"]][TOKEN_DICT["integer"]] = "integer"
PARSE_TABLE[NONTERMINAL_DICT["PAR"]][TOKEN_DICT["real"]] = "real"
PARSE_TABLE[NONTERMINAL_DICT["PAR"]][TOKEN_DICT["literal"]] = "literal"
PARSE_TABLE[NONTERMINAL_DICT["PAR"]][TOKEN_DICT["string"]] = "string"

#REPPAR
PARSE_TABLE[NONTERMINAL_DICT["REPPAR"]][TOKEN_DICT[","]] = ", PAR REPPAR"
PARSE_TABLE[NONTERMINAL_DICT["REPPAR"]][TOKEN_DICT[")"]] = "î"


printTable(PARSE_TABLE)